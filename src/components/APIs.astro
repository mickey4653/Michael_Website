---
// import Button from "./Button.astro";
import { Icon } from "astro-icon";

---
<section class="api-container container-sm">
  
    <div class="grid-sm api-buttons">
    <button  id="info" class="btn btn--secondary">Get Info</button>
    <button  id="summary" class="btn btn--secondary">Get Summary</button>
    <button  id="skills" class="btn btn--secondary">Get Skills</button>
    <button  id="languages" class="btn btn--secondary">Get Languages</button>
    <button  id="workExperience" class="btn btn--secondary">Get Work Experience</button>
    <button  id="projects" class="btn btn--secondary">Get Projects</button>
    </div>

    <div class="loading-container loading-hidden">
        <!-- <Icon name="line-md:downloading-loop" width={32} height={32} fill="currentColor" /> -->
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-linecap="round" stroke-width="2"><path stroke-dasharray="2 4" stroke-dashoffset="6" d="M12 3C16.9706 3 21 7.02944 21 12C21 16.9706 16.9706 21 12 21"><animate attributeName="stroke-dashoffset" dur="0.6s" repeatCount="indefinite" values="6;0"/></path><path stroke-dasharray="30" stroke-dashoffset="30" d="M12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3"><animate fill="freeze" attributeName="stroke-dashoffset" begin="0.1s" dur="0.3s" values="30;0"/></path><path stroke-dasharray="10" stroke-dashoffset="10" d="M12 8v7.5"><animate fill="freeze" attributeName="stroke-dashoffset" begin="0.5s" dur="0.2s" values="10;0"/></path><path stroke-dasharray="6" stroke-dashoffset="6" d="M12 15.5l3.5 -3.5M12 15.5l-3.5 -3.5"><animate fill="freeze" attributeName="stroke-dashoffset" begin="0.7s" dur="0.2s" values="6;0"/></path></g></svg>
        <p>Loading...</p>
    </div>
      

<pre class="display-data" id="dataDisplay"></pre>
    
</section>

<script>
// console.log('hello world');

// import data from '../data/personal_info.json';
const jsonServerUrl = 'https://resume-data.onrender.com/resume';

const buttons = document.querySelectorAll(".api-buttons button");

const loadingContainer = document.querySelector('.loading-container');

// Function to simulate loading with a delay
async function simulateLoading(delay) {
    return new Promise((resolve) => {
        setTimeout(resolve, delay);
    });
}
async function fetchData(dataIdentifier) {
    try {
        // Access the data directly from the imported JSON file
        // const dataObject = data[0]; // Assuming the JSON file contains an array with one object
        // // console.log(dataObject);
        // if (!dataObject) {
        //     throw new Error('Data not found');
        // }

         // Display loading feedback
         loadingContainer.classList.remove('loading-hidden');

// Simulate loading (replace this with your actual loading logic)
await simulateLoading(3000); // Simulate loading for 3 seconds (adjust as needed)

const response = await fetch(`${jsonServerUrl}`);
if (!response.ok){
    throw new Error(`Network response was not ok. URL: ${jsonServerUrl}`);
}

const data = await response.json();

        // Handle the data based on the button clicked
        let displayText = "";

        if (dataIdentifier === "info") {
            // console.log(data[0].info.firstname);
            const inf = data[0].info;
            // console.log(inf); // Check if the 'info' object is accessible
            displayText = `First Name: ${inf.firstname}`+`
            Last Name: ${inf.lastname}` + `
            Email: ${inf.email}` + `
            Phone:${inf.phone}` + `
            Linkedln: ${inf.linkedln}` +`
            GitHub: ${inf.github}` + `
            Disabled: ${inf.disabled}` + `
            Veteran: ${inf.veteran}`;
        } 
        // console.log(data); // Check if the entire JSON data is imported correctly
        else if (dataIdentifier === "summary") {
            // Handle summary data
            const summ = data[0].summary;
            displayText = `About: ${summ.about}\n
            ${summ.content2}\n
            ${summ.content3}\n
            ${summ.content4}\n`;
        } 
        else if (dataIdentifier === "skills") {
            // Handle skills data
            const skill = data[0].skills;
            displayText = `Skills: ${skill.programminglanguages}\n
            Web Technologies: ${skill.webtechnologies}\n
            Databases: ${skill.Databases}\n
            Frameworks: ${skill.Frameworks}\n
            Networking: ${skill.Networking}\n
            Others: ${skill.Others}\n`;
        } else if (dataIdentifier === "languages") {
            // Handle languages data
            const lang = data[0].skills;
            displayText = `Languages: ${lang.languages}\n`;
        } 
        else if (dataIdentifier === "workExperience") {
            // Handle work experience data
            const work = data[0].skills;
            const workExperience = work.workExperience;
            if(Array.isArray(workExperience)){
            // console.log(work.workExperience);
            displayText = `Work Experience: \n`;
            workExperience.forEach((item,itemIndex)=>{
            displayText += `${itemIndex + 1}:\n`;
            displayText += `  Company: ${item.company}\n`;
            displayText += `  Start_date: ${item.start_date}\n`;
            displayText += `  End_date: ${item.end_date}\n`;
            displayText += `  Position: ${item.position}\n`;
            displayText += `  Responsibility: ${item.responsibilities}\n`;
            });
            // console.log(workExperience);
            }else{
                displayText = "No work experience data available";
            }
            
        //   console.log(displayText);
        } 
        else if (dataIdentifier === "projects") {
            // Handle projects data
            const proj = data[0].skills; 
            // console.log(proj.projects);
            const projects = proj.projects;
    if (Array.isArray(projects)) {
        displayText = "Projects: \n";
        projects.forEach((project, projIndex) => {
            displayText += `Project ${projIndex + 1}:\n`;
            displayText += `  Name: ${project.name}\n`;
            displayText += `  Start_date: ${project.start_date}\n`;
            displayText += `  End_date: ${project.end_date}\n`;
            displayText += `  Description: ${project.description}\n`;
            // Add more fields as needed
        });
        }else{
            displayText = "No projects data available";
        }
    }
        // console.log(displayText);
        return displayText;
    } catch (error) {
        console.error('There was a problem with the data:', error);
        return null;
    }
}

// Add a click event listener to each button
buttons.forEach(button => {
    button.addEventListener('click', async () => {
        const dataIdentifier = button.id;
        // console.log('Button clicked', dataIdentifier);
        const dataDisplay = document.getElementById('dataDisplay');
dataDisplay.textContent = JSON.stringify(dataIdentifier, null, 2);
        try {
            const displayText = await fetchData(dataIdentifier);

        //     console.log('Data Identifier:', dataIdentifier);
        // console.log('Display Text:', displayText);

            if (displayText !== null) {
                // Handle the data, you can update your UI here
                dataDisplay.textContent = displayText;
            } else {
                // Handle the case where data fetching failed
                dataDisplay.textContent = 'Failed to fetch data';
            }
        } catch (error) {
            console.error('There was a problem with the fetch operation:', error);
            dataDisplay.textContent = 'Failed to fetch data';
        }finally {
        // Hide the loading container when loading is complete or failed
        loadingContainer.classList.add('loading-hidden');
    }
    });
});



</script>
